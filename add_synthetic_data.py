#!/usr/bin/env python3
"""
Script to add synthetic emotion data and therapy themes for testing PDF generation
"""

import os
import sys
import random
from datetime import datetime, timedelta

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from database.session import get_session, close_session
from database.models import User, EmotionEntry, TherapyTheme

def create_synthetic_emotion_entry(user_id: int, state: str, emotion_type: str, 
                                 created_at: datetime, answer_text: str = None, 
                                 option: str = None):
    """Create a synthetic emotion entry"""
    return EmotionEntry(
        user_id=user_id,
        state=state,
        emotion_type=emotion_type,
        created_at=created_at,
        answer_text=answer_text,
        option=option
    )

def create_synthetic_therapy_theme(user_id: int, original_text: str, created_at: datetime,
                                 shortened_text: str = None, is_shortened: bool = False,
                                 is_marked_for_processing: bool = False):
    """Create a synthetic therapy theme"""
    return TherapyTheme(
        user_id=user_id,
        original_text=original_text,
        shortened_text=shortened_text,
        is_shortened=is_shortened,
        is_marked_for_processing=is_marked_for_processing,
        created_at=created_at
    )

def generate_therapy_themes_for_user(user_id: int):
    """Generate synthetic therapy themes data"""
    session = get_session()
    
    # Clear existing therapy themes for this user
    existing_themes = session.query(TherapyTheme).filter(TherapyTheme.user_id == user_id).count()
    if existing_themes > 0:
        print(f"üßπ –£–¥–∞–ª—è–µ–º {existing_themes} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–º –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏...")
        session.query(TherapyTheme).filter(TherapyTheme.user_id == user_id).delete()
        session.commit()
    
    now = datetime.now()
    themes_to_add = []
    
    # Sample therapy themes in Russian
    therapy_themes = [
        "–Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–º–Ω–µ–≤–∞—é—Å—å –≤ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö, —á—Ç–æ –º–µ—à–∞–µ—Ç –º–Ω–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ",
        "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≥—Ä–∞–Ω–∏—Ü –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, —è –Ω–µ —É–º–µ—é –≥–æ–≤–æ—Ä–∏—Ç—å '–Ω–µ—Ç'",
        "–Ø —á–∞—Å—Ç–æ —á—É–≤—Å—Ç–≤—É—é —Ç—Ä–µ–≤–æ–≥—É –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –Ω–µ –∑–Ω–∞—é –∫–∞–∫ —Å —ç—Ç–∏–º —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è",
        "–ú–Ω–µ —Ç—Ä—É–¥–Ω–æ –≤—ã—Ä–∞–∂–∞—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ",
        "–Ø —Å–∫–ª–æ–Ω–Ω–∞ –∫ –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º—É –∏ —ç—Ç–æ –∏—Å—Ç–æ—â–∞–µ—Ç –º–µ–Ω—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ",
        "–£ –º–µ–Ω—è –Ω–∏–∑–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞, —è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—é —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏",
        "–ú–Ω–µ —Å–ª–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å –ª—é–¥—è–º –ø–æ—Å–ª–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º",
        "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é —Å–∏–ª—å–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã –∑–∞ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥–ª–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å",
        "–£ –º–µ–Ω—è –µ—Å—Ç—å —Å—Ç—Ä–∞—Ö –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–ª–∏—è–µ—Ç –Ω–∞ –º–æ–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "–ú–Ω–µ —Ç—Ä—É–¥–Ω–æ –ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–º–æ—â–∏, —è –ø—Ä–∏–≤—ã–∫–ª–∞ –≤—Å–µ –¥–µ–ª–∞—Ç—å —Å–∞–º–∞",
        "–Ø —á–∞—Å—Ç–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞ –∏–∑-–∑–∞ —Å—Ç—Ä–∞—Ö–∞ –Ω–µ—É–¥–∞—á–∏",
        "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≥–Ω–µ–≤–æ–º –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö",
        "–ú–Ω–µ —Å–ª–æ–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –∏ –ø—Ä–∏–∑–Ω–∞–≤–∞—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
        "–Ø –±–æ—é—Å—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –∏–∑–±–µ–≥–∞—é —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤",
        "–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–∞–≤—è–∑—á–∏–≤—ã–µ –º—ã—Å–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ—à–∞—é—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–º"
    ]
    
    # Shortened versions for some themes
    shortened_themes = [
        "–ü—Ä–æ–±–ª–µ–º—ã —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –≤ —Å–µ–±–µ",
        "–°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", 
        "–¢—Ä–µ–≤–æ–≥–∞ –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏",
        "–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º —ç–º–æ—Ü–∏–π",
        "–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏—Å—Ç–æ—â–µ–Ω–∏–µ",
        "–ù–∏–∑–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞",
        "–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–≤–µ—Ä–∏–µ–º",
        "–ß—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã",
        "–°—Ç—Ä–∞—Ö –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞",
        "–°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø—Ä–æ—Å—å–±–∞–º–∏ –æ –ø–æ–º–æ—â–∏",
        "–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è –∏–∑-–∑–∞ —Å—Ç—Ä–∞—Ö–∞ –Ω–µ—É–¥–∞—á–∏",
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–Ω–µ–≤–æ–º",
        "–ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤",
        "–ò–∑–±–µ–≥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤",
        "–ù–∞–≤—è–∑—á–∏–≤—ã–µ –º—ã—Å–ª–∏"
    ]
    
    print("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–º—ã –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏...")
    
    # Generate themes for last 2 months (60 days)
    for days_ago in range(60):
        theme_date = now - timedelta(days=days_ago)
        
        # Skip some days randomly
        if random.random() < 0.7:  # 70% chance to skip a day
            continue
        
        # Generate 1-2 themes per day when there are themes
        themes_per_day = random.randint(1, 2)
        
        for _ in range(themes_per_day):
            theme_time = theme_date.replace(
                hour=random.randint(9, 21),
                minute=random.randint(0, 59),
                second=random.randint(0, 59)
            )
            
            # Select random theme
            theme_index = random.randint(0, len(therapy_themes) - 1)
            original_text = therapy_themes[theme_index]
            
            # 40% chance to have shortened version
            is_shortened = random.random() < 0.4
            shortened_text = shortened_themes[theme_index] if is_shortened else None
            
            # 30% chance to be marked from thought diary
            is_marked = random.random() < 0.3
            
            theme = create_synthetic_therapy_theme(
                user_id=user_id,
                original_text=original_text,
                shortened_text=shortened_text,
                is_shortened=is_shortened,
                is_marked_for_processing=is_marked,
                created_at=theme_time
            )
            
            themes_to_add.append(theme)
    
    # Add some specific recent themes for testing
    print("üéØ –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π...")
    
    specific_recent_themes = [
        ("–°–µ–≥–æ–¥–Ω—è —Å–Ω–æ–≤–∞ –±—ã–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –º–∞–º–æ–π, –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–∞–ª–∞–¥–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –º–∞–º–æ–π", True),
        ("–ú–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ –Ω–æ —è –±–æ—é—Å—å —á—Ç–æ –Ω–µ —Å–ø—Ä–∞–≤–ª—é—Å—å —Å –Ω–æ–≤–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é", None, False),
        ("–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –º–æ–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤ –æ–±—â–µ–Ω–∏–∏, —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –æ–¥–∏–Ω–æ–∫–æ–π", "–ü—Ä–æ–±–ª–µ–º—ã –≤ –æ–±—â–µ–Ω–∏–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º", True),
        ("–ù–µ –º–æ–≥—É –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –º—ã—Å–ª–µ–π –æ –ø—Ä–æ—à–ª—ã—Ö –æ—à–∏–±–∫–∞—Ö, –æ–Ω–∏ –º–µ—à–∞—é—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ", None, False),
        ("–ö–æ–ª–ª–µ–≥–∏ –Ω–µ —Ü–µ–Ω—è—Ç –º–æ—é —Ä–∞–±–æ—Ç—É, –¥—É–º–∞—é —Å—Ç–æ–∏—Ç –ª–∏ –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ", "–ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ", True)
    ]
    
    for days_ago, (original, shortened, is_shortened) in enumerate(specific_recent_themes):
        theme_date = now - timedelta(days=days_ago)
        theme_time = theme_date.replace(
            hour=random.randint(15, 20),
            minute=random.randint(0, 59)
        )
        
        # Recent themes are more likely to be marked for processing
        is_marked = days_ago < 3
        
        theme = create_synthetic_therapy_theme(
            user_id=user_id,
            original_text=original,
            shortened_text=shortened,
            is_shortened=is_shortened,
            is_marked_for_processing=is_marked,
            created_at=theme_time
        )
        
        themes_to_add.append(theme)
    
    # Bulk insert therapy themes
    print(f"üíæ –î–æ–±–∞–≤–ª—è–µ–º {len(themes_to_add)} —Ç–µ–º –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    session.add_all(themes_to_add)
    session.commit()
    
    # Print therapy themes statistics
    total_themes = len(themes_to_add)
    shortened_count = len([t for t in themes_to_add if t.is_shortened])
    marked_count = len([t for t in themes_to_add if t.is_marked_for_processing])
    
    print(f"\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–º –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"  –í—Å–µ–≥–æ —Ç–µ–º: {total_themes}")
    print(f"  –° —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º: {shortened_count}")
    print(f"  –û—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞ –º—ã—Å–ª–µ–π: {marked_count}")
    
    close_session(session)
    return True

def generate_synthetic_data_for_user(user_id: int):
    """Generate synthetic emotion data for different time periods"""
    
    session = get_session()
    
    # Check if user exists
    user = session.query(User).filter(User.id == user_id).first()
    if not user:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        close_session(session)
        return False
    
    print(f"üë§ –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.full_name} (ID: {user_id})")
    
    # Clear existing emotion entries for this user
    existing_entries = session.query(EmotionEntry).filter(EmotionEntry.user_id == user_id).count()
    if existing_entries > 0:
        print(f"üßπ –£–¥–∞–ª—è–µ–º {existing_entries} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π...")
        session.query(EmotionEntry).filter(EmotionEntry.user_id == user_id).delete()
        session.commit()
    
    now = datetime.now()
    entries_to_add = []
    
    # Emotion states and contexts
    positive_states = [
        ("good_state_1", "–°–µ–≥–æ–¥–Ω—è –±—ã–ª –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –Ω–∞ —Ä–∞–±–æ—Ç–µ, –≤—Å–µ –ø–æ–ª—É—á–∞–ª–æ—Å—å –ª–µ–≥–∫–æ"),
        ("good_state_2", "–ü—Ä–æ–≤–µ–ª–∞ –≤—Ä–µ–º—è —Å —Å–µ–º—å–µ–π, –æ—á–µ–Ω—å —Å–ø–æ–∫–æ–π–Ω–æ –∏ —É—é—Ç–Ω–æ"),
        ("good_state_3", "–í—Å—Ç—Ä–µ—Ç–∏–ª–∞—Å—å —Å –ø–æ–¥—Ä—É–≥–æ–π, –±—ã–ª–æ —Ç–µ–ø–ª–æ –∏ –¥—É—à–µ–≤–Ω–æ"),
        ("good_state_4", "–ü—Ä–æ—á–∏—Ç–∞–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –Ω–∞ –Ω–æ–≤—ã–µ –∏–¥–µ–∏"),
        ("good_state_5", "–°–ø—Ä–∞–≤–∏–ª–∞—Å—å —Å —Ç—Ä—É–¥–Ω–æ–π –∑–∞–¥–∞—á–µ–π, —á—É–≤—Å—Ç–≤—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
    ]
    
    negative_states = [
        ("bad_state_1", "–û—á–µ–Ω—å —É—Å—Ç–∞–ª–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ, –Ω–µ—Ç —Å–∏–ª –Ω–∏ –Ω–∞ —á—Ç–æ"),
        ("bad_state_2", "–ë–µ—Å–ø–æ–∫–æ—é—Å—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏"),
        ("bad_state_3", "–ü–æ—Å—Å–æ—Ä–∏–ª–∞—Å—å —Å –∫–æ–ª–ª–µ–≥–æ–π, –æ—á–µ–Ω—å —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç –µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"),
        ("bad_state_4", "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –æ–¥–∏–Ω–æ–∫–æ–π, —Ö–æ—á–µ—Ç—Å—è –æ—Ç—Å—Ç—Ä–∞–Ω–∏—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö"),
        ("bad_state_5", "–°–∫–∞–∑–∞–ª–∞ —á—Ç–æ-—Ç–æ –Ω–µ—É–º–µ—Å—Ç–Ω–æ–µ, —Ç–µ–ø–µ—Ä—å —Å—Ç—ã–¥–Ω–æ")
    ]
    
    # Generate data for last 3 months (90 days)
    print("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞...")
    
    for days_ago in range(90):
        entry_date = now - timedelta(days=days_ago)
        
        # Skip some days randomly (not every day has entries)
        if random.random() < 0.3:  # 30% chance to skip a day
            continue
        
        # Generate 1-4 entries per day
        entries_per_day = random.randint(1, 4)
        
        for entry_num in range(entries_per_day):
            # Add some hours variation
            entry_time = entry_date.replace(
                hour=random.randint(8, 22),
                minute=random.randint(0, 59),
                second=random.randint(0, 59)
            )
            
            # 60% positive, 40% negative emotions (realistic distribution)
            if random.random() < 0.6:
                state, context = random.choice(positive_states)
                emotion_type = "positive"
            else:
                state, context = random.choice(negative_states)
                emotion_type = "negative"
            
            # Generate option (0 or 1)
            option = f"{state.split('_')[0]}_{state.split('_')[1]}_{random.randint(0, 1)}"
            
            entry = create_synthetic_emotion_entry(
                user_id=user_id,
                state=state,
                emotion_type=emotion_type,
                created_at=entry_time,
                answer_text=context,
                option=option
            )
            
            entries_to_add.append(entry)
    
    # Add some specific patterns for testing
    print("üéØ –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # Add more stress entries in the last week
    for days_ago in range(7):
        entry_date = now - timedelta(days=days_ago)
        if random.random() < 0.7:  # 70% chance for stress entry
            entry_time = entry_date.replace(
                hour=random.randint(18, 21),  # Evening stress
                minute=random.randint(0, 59)
            )
            
            stress_contexts = [
                "–î–µ–¥–ª–∞–π–Ω –Ω–∞ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è, –æ—á–µ–Ω—å –Ω–µ—Ä–≤–Ω–∏—á–∞—é",
                "–ú–Ω–æ–≥–æ –∑–∞–¥–∞—á –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å, –Ω–µ –∑–Ω–∞—é —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å",
                "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤ —Å–µ–º—å–µ, –æ—á–µ–Ω—å –ø–µ—Ä–µ–∂–∏–≤–∞—é",
                "–ü—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º —É –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞"
            ]
            
            entry = create_synthetic_emotion_entry(
                user_id=user_id,
                state="bad_state_2",  # Anxiety
                emotion_type="negative",
                created_at=entry_time,
                answer_text=random.choice(stress_contexts),
                option="bad_state_2_1"
            )
            
            entries_to_add.append(entry)
    
    # Add some joy entries in the last 3 days
    for days_ago in range(3):
        entry_date = now - timedelta(days=days_ago)
        entry_time = entry_date.replace(
            hour=random.randint(10, 16),  # Daytime joy
            minute=random.randint(0, 59)
        )
        
        joy_contexts = [
            "–ü–æ–ª—É—á–∏–ª–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞",
            "–£–¥–∞—á–Ω–æ –ø—Ä–æ–≤–µ–ª–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é",
            "–í—Å—Ç—Ä–µ—Ç–∏–ª–∞ —Å—Ç–∞—Ä–æ–≥–æ –¥—Ä—É–≥–∞ –Ω–∞ —É–ª–∏—Ü–µ",
            "–ö—É–ø–∏–ª–∞ —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ –¥–ª—è —Å–µ–±—è"
        ]
        
        entry = create_synthetic_emotion_entry(
            user_id=user_id,
            state="good_state_1",  # Joy/uplift
            emotion_type="positive",
            created_at=entry_time,
            answer_text=random.choice(joy_contexts),
            option="good_state_1_1"
        )
        
        entries_to_add.append(entry)
    
    # Bulk insert all entries
    print(f"üíæ –î–æ–±–∞–≤–ª—è–µ–º {len(entries_to_add)} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    session.add_all(entries_to_add)
    session.commit()
    
    # Print statistics
    total_entries = len(entries_to_add)
    positive_count = len([e for e in entries_to_add if e.emotion_type == "positive"])
    negative_count = len([e for e in entries_to_add if e.emotion_type == "negative"])
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_entries}")
    print(f"  –ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π: {positive_count}")
    print(f"  –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π: {negative_count}")
    
    # Show distribution by periods
    three_days_ago = now - timedelta(days=3)
    week_ago = now - timedelta(days=7)
    month_ago = now - timedelta(days=30)
    
    entries_3d = len([e for e in entries_to_add if e.created_at >= three_days_ago])
    entries_7d = len([e for e in entries_to_add if e.created_at >= week_ago])
    entries_30d = len([e for e in entries_to_add if e.created_at >= month_ago])
    entries_90d = total_entries
    
    print(f"\nüìÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:")
    print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è: {entries_3d} –∑–∞–ø–∏—Å–µ–π")
    print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {entries_7d} –∑–∞–ø–∏—Å–µ–π")
    print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: {entries_30d} –∑–∞–ø–∏—Å–µ–π")
    print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π: {entries_90d} –∑–∞–ø–∏—Å–µ–π")
    
    close_session(session)
    return True

def verify_user_exists(user_id: int):
    """Verify that user exists and show info"""
    session = get_session()
    user = session.query(User).filter(User.id == user_id).first()
    
    if user:
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:")
        print(f"  ID: {user.id}")
        print(f"  –ò–º—è: {user.full_name}")
        print(f"  Telegram ID: {user.telegram_id}")
        print(f"  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {getattr(user, 'registration_complete', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        # Check existing emotion entries
        existing_count = session.query(EmotionEntry).filter(EmotionEntry.user_id == user_id).count()
        print(f"  –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π —ç–º–æ—Ü–∏–π: {existing_count}")
        
        # Check existing therapy themes
        existing_themes = session.query(TherapyTheme).filter(TherapyTheme.user_id == user_id).count()
        print(f"  –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–º –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏: {existing_themes}")
        
        close_session(session)
        return True
    else:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        close_session(session)
        return False

def list_all_users():
    """List all users in the database"""
    session = get_session()
    users = session.query(User).all()
    
    print("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    print("-" * 50)
    
    for user in users:
        emotion_count = session.query(EmotionEntry).filter(EmotionEntry.user_id == user.id).count()
        theme_count = session.query(TherapyTheme).filter(TherapyTheme.user_id == user.id).count()
        print(f"ID: {user.id} | {user.full_name} | Telegram: {user.telegram_id} | –≠–º–æ—Ü–∏–π: {emotion_count} | –¢–µ–º: {theme_count}")
    
    close_session(session)

def main():
    """Main function"""
    print("üß™ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 65)
    
    # List all users first
    list_all_users()
    
    print("\n" + "=" * 65)
    
    user_id = 8
    
    # Verify user exists
    if not verify_user_exists(user_id):
        print(f"\nüí° –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ user_id –≤ —Å–∫—Ä–∏–ø—Ç–µ")
        return
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}...")
    
    # Generate synthetic emotion data
    emotion_success = generate_synthetic_data_for_user(user_id)
    
    # Generate synthetic therapy themes data  
    themes_success = generate_therapy_themes_for_user(user_id)
    
    if emotion_success and themes_success:
        print(f"\n‚úÖ –í—Å–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        print(f"\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:")
        print(f"  üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç–º–æ—Ü–∏–π:")
        print(f"    ‚Ä¢ 3 –¥–Ω—è - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
        print(f"    ‚Ä¢ 7 –¥–Ω–µ–π - PDF –æ—Ç—á–µ—Ç")
        print(f"    ‚Ä¢ 30 –¥–Ω–µ–π - PDF –æ—Ç—á–µ—Ç")
        print(f"    ‚Ä¢ 90 –¥–Ω–µ–π - PDF –æ—Ç—á–µ—Ç")
        print(f"  üìù –¢–µ–º—ã –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"    ‚Ä¢ 3 –¥–Ω—è - –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫")
        print(f"    ‚Ä¢ –Ω–µ–¥–µ–ª—è - –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫")
        print(f"    ‚Ä¢ 2 –Ω–µ–¥–µ–ª–∏ - PDF –æ—Ç—á–µ—Ç")
        print(f"    ‚Ä¢ –º–µ—Å—è—Ü - PDF –æ—Ç—á–µ—Ç")
        print(f"    ‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - PDF –æ—Ç—á–µ—Ç")
        print(f"\nü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:")
        print(f"  ‚Ä¢ '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç–º–æ—Ü–∏–π' - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞")
        print(f"  ‚Ä¢ '–¢–µ–º—ã –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏' - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main() 