import logging
from aiogram import types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.fsm.context import FSMContext
from src.database.session import get_session, close_session
from src.database.models import RelaxationMedia
from constants import MAIN_MENU, RELAXATION_FORMAT_SELECTION, RELAXATION_AUDIO_LIST, RELAXATION_VIDEO_LIST
from aiogram import Router, F
from .utils import delete_previous_messages
from trial_manager import require_trial_access

logger = logging.getLogger(__name__)
router = Router(name=__name__)

async def start_relaxation_methods(message: types.Message, state: FSMContext):
    """Start relaxation methods feature"""
    logger.info(f"Starting relaxation methods for user {message.from_user.id}")
    
    # Delete previous messages
    await delete_previous_messages(message, state)
    
    # Set state
    await state.set_state(RELAXATION_FORMAT_SELECTION)
    
    # Create keyboard for format selection
    keyboard = [
        [KeyboardButton(text="–ê—É–¥–∏–æ")],
        [KeyboardButton(text="–í–∏–¥–µ–æ")],
        [KeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    sent_message = await message.answer(
        "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç —Å–Ω–∏–∑–∏—Ç—å —Å—Ç—Ä–µ—Å—Å, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã –∏ —É–ª—É—á—à–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:",
        reply_markup=reply_markup
    )
    
    # Save message for deletion
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(sent_message.message_id)
    messages_to_delete.append(message.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)

@router.message(F.text == "–ê—É–¥–∏–æ")
async def handle_audio_selection(message: types.Message, state: FSMContext):
    """Handle audio format selection"""
    current_state = await state.get_state()
    if current_state != RELAXATION_FORMAT_SELECTION:
        return
    
    logger.info(f"User {message.from_user.id} selected audio relaxation")
    
    # Get audio files from database
    session = get_session()
    try:
        audio_files = session.query(RelaxationMedia).filter(
            RelaxationMedia.media_type == 'audio',
            RelaxationMedia.is_active == True
        ).order_by(RelaxationMedia.order_position).all()
        
        if not audio_files:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await start_relaxation_methods(message, state)
            return
        
        # Create inline keyboard with audio files
        keyboard = []
        for audio in audio_files:
            keyboard.append([InlineKeyboardButton(
                text=f"üéµ {audio.title}",
                callback_data=f"relaxation_audio_{audio.id}"
            )])
        
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="relaxation_back")])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        # Delete previous messages
        await delete_previous_messages(message, state)
        
        sent_message = await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        
        # Set new state and save message
        await state.set_state(RELAXATION_AUDIO_LIST)
        data = await state.get_data()
        messages_to_delete = data.get('messages_to_delete', [])
        messages_to_delete.append(sent_message.message_id)
        messages_to_delete.append(message.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        
    finally:
        close_session(session)

@router.message(F.text == "–í–∏–¥–µ–æ")
async def handle_video_selection(message: types.Message, state: FSMContext):
    """Handle video format selection"""
    current_state = await state.get_state()
    if current_state != RELAXATION_FORMAT_SELECTION:
        return
    
    logger.info(f"User {message.from_user.id} selected video relaxation")
    
    # Get video files from database
    session = get_session()
    try:
        video_files = session.query(RelaxationMedia).filter(
            RelaxationMedia.media_type == 'video',
            RelaxationMedia.is_active == True
        ).order_by(RelaxationMedia.order_position).all()
        
        if not video_files:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await start_relaxation_methods(message, state)
            return
        
        # Create inline keyboard with video files
        keyboard = []
        for video in video_files:
            keyboard.append([InlineKeyboardButton(
                text=f"üìπ {video.title}",
                callback_data=f"relaxation_video_{video.id}"
            )])
        
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="relaxation_back")])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        # Delete previous messages
        await delete_previous_messages(message, state)
        
        sent_message = await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        
        # Set new state and save message
        await state.set_state(RELAXATION_VIDEO_LIST)
        data = await state.get_data()
        messages_to_delete = data.get('messages_to_delete', [])
        messages_to_delete.append(sent_message.message_id)
        messages_to_delete.append(message.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        
    finally:
        close_session(session)

@router.callback_query(F.data.startswith("relaxation_audio_"))
@require_trial_access('relaxation_methods')
async def handle_audio_playback(callback: types.CallbackQuery, state: FSMContext):
    """Handle audio file playback"""
    await callback.answer()
    
    media_id = int(callback.data.split("_")[-1])
    logger.info(f"User {callback.from_user.id} selected audio file {media_id}")
    
    session = get_session()
    try:
        audio_file = session.query(RelaxationMedia).filter(
            RelaxationMedia.id == media_id,
            RelaxationMedia.media_type == 'audio',
            RelaxationMedia.is_active == True
        ).first()
        
        if not audio_file:
            await callback.message.answer("–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # Send audio file
        try:
            # Create back button
            keyboard = [[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∞—É–¥–∏–æ", callback_data="relaxation_back_audio")]]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            description = f"üéµ **{audio_file.title}**"
            if audio_file.description:
                description += f"\n\n{audio_file.description}"
            if audio_file.duration:
                minutes = audio_file.duration // 60
                seconds = audio_file.duration % 60
                description += f"\n\n‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes}:{seconds:02d}"
            
            # Try to send as audio file
            audio_input = FSInputFile(audio_file.file_path)
            await callback.message.answer_audio(
                audio=audio_input,
                caption=description,
                reply_markup=reply_markup
            )
                
        except Exception as e:
            logger.error(f"Error sending audio file: {e}")
            await callback.message.answer(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {audio_file.title}"
            )
    
    finally:
        close_session(session)

@router.callback_query(F.data.startswith("relaxation_video_"))
@require_trial_access('relaxation_methods')
async def handle_video_playback(callback: types.CallbackQuery, state: FSMContext):
    """Handle video file playback"""
    await callback.answer()
    
    media_id = int(callback.data.split("_")[-1])
    logger.info(f"User {callback.from_user.id} selected video file {media_id}")
    
    session = get_session()
    try:
        video_file = session.query(RelaxationMedia).filter(
            RelaxationMedia.id == media_id,
            RelaxationMedia.media_type == 'video',
            RelaxationMedia.is_active == True
        ).first()
        
        if not video_file:
            await callback.message.answer("–í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # Send video file
        try:
            # Create back button
            keyboard = [[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –≤–∏–¥–µ–æ", callback_data="relaxation_back_video")]]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            description = f"üìπ **{video_file.title}**"
            if video_file.description:
                description += f"\n\n{video_file.description}"
            if video_file.duration:
                minutes = video_file.duration // 60
                seconds = video_file.duration % 60
                description += f"\n\n‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes}:{seconds:02d}"
            
            # Try to send as video file
            video_input = FSInputFile(video_file.file_path)
            await callback.message.answer_video(
                video=video_input,
                caption=description,
                reply_markup=reply_markup
            )
                
        except Exception as e:
            logger.error(f"Error sending video file: {e}")
            await callback.message.answer(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {video_file.title}"
            )
    
    finally:
        close_session(session)

@router.callback_query(F.data == "relaxation_back")
@require_trial_access('relaxation_methods')
async def handle_back_to_format_selection(callback: types.CallbackQuery, state: FSMContext):
    """Handle back to format selection"""
    await callback.answer()
    await callback.message.delete()
    
    # Set state
    await state.set_state(RELAXATION_FORMAT_SELECTION)
    
    # Create keyboard for format selection
    keyboard = [
        [KeyboardButton(text="–ê—É–¥–∏–æ")],
        [KeyboardButton(text="–í–∏–¥–µ–æ")],
        [KeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç —Å–Ω–∏–∑–∏—Ç—å —Å—Ç—Ä–µ—Å—Å, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã –∏ —É–ª—É—á—à–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:",
        reply_markup=reply_markup
    )

@router.callback_query(F.data == "relaxation_back_audio")
@require_trial_access('relaxation_methods')
async def handle_back_to_audio_list(callback: types.CallbackQuery, state: FSMContext):
    """Handle back to audio list"""
    await callback.answer()
    
    # Get audio files from database
    session = get_session()
    try:
        audio_files = session.query(RelaxationMedia).filter(
            RelaxationMedia.media_type == 'audio',
            RelaxationMedia.is_active == True
        ).order_by(RelaxationMedia.order_position).all()
        
        if not audio_files:
            await callback.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # Create inline keyboard with audio files
        keyboard = []
        for audio in audio_files:
            keyboard.append([InlineKeyboardButton(
                text=f"üéµ {audio.title}",
                callback_data=f"relaxation_audio_{audio.id}"
            )])
        
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="relaxation_back")])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        
        # Set new state
        await state.set_state(RELAXATION_AUDIO_LIST)
        
    finally:
        close_session(session)

@router.callback_query(F.data == "relaxation_back_video")
@require_trial_access('relaxation_methods')
async def handle_back_to_video_list(callback: types.CallbackQuery, state: FSMContext):
    """Handle back to video list"""
    await callback.answer()
    
    # Get video files from database
    session = get_session()
    try:
        video_files = session.query(RelaxationMedia).filter(
            RelaxationMedia.media_type == 'video',
            RelaxationMedia.is_active == True
        ).order_by(RelaxationMedia.order_position).all()
        
        if not video_files:
            await callback.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # Create inline keyboard with video files
        keyboard = []
        for video in video_files:
            keyboard.append([InlineKeyboardButton(
                text=f"üìπ {video.title}",
                callback_data=f"relaxation_video_{video.id}"
            )])
        
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="relaxation_back")])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        
        # Set new state
        await state.set_state(RELAXATION_VIDEO_LIST)
        
    finally:
        close_session(session)

@router.message(F.text == "–ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def handle_back_to_main_menu(message: types.Message, state: FSMContext):
    """Handle back to main menu from relaxation methods"""
    current_state = await state.get_state()
    if current_state in [RELAXATION_FORMAT_SELECTION, RELAXATION_AUDIO_LIST, RELAXATION_VIDEO_LIST]:
        logger.info(f"User {message.from_user.id} returning to main menu from relaxation methods")
        from .main_menu import main_menu
        await main_menu(message, state) 