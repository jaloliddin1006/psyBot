import logging
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.filters import StateFilter
from src.database.session import get_session, close_session
from src.database.models import User, TherapyTheme
from .utils import delete_previous_messages
from constants import *
from datetime import datetime, timedelta
import os
import tempfile
import asyncio
from google import genai
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from collections import defaultdict
from .emotion_analysis import setup_russian_fonts
from trial_manager import require_trial_access

# Initialize logger and router
logger = logging.getLogger(__name__)
router = Router(name=__name__)

# Initialize GenAI client
client = genai.Client(
    api_key=os.environ.get("GOOGLE_GENAI_API_KEY"),
    http_options={"base_url": os.environ.get("API_URL")}
)

async def start_therapy_themes(message: types.Message, state: FSMContext):
    """Start therapy themes management flow"""
    logger.info(f"start_therapy_themes called for user {message.from_user.id}")
    
    # Check user registration
    session = get_session()
    db_user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    
    if not db_user or not getattr(db_user, 'registration_complete', False) or not db_user.full_name:
        close_session(session)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    close_session(session)
    
    # Clean up previous messages
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º—ã", callback_data="view_themes")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", callback_data="add_theme")],
        [InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    sent = await message.answer(
        "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–º –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ —Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º?",
        reply_markup=keyboard
    )
    
    messages_to_delete.append(sent.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)
    await state.set_state(THERAPY_THEMES_MENU)

@router.callback_query(StateFilter(THERAPY_THEMES_MENU), F.data.in_(["view_themes", "add_theme", "back_to_main"]))
@require_trial_access('therapy_themes')
async def handle_themes_menu(callback: types.CallbackQuery, state: FSMContext):
    """Handle therapy themes menu selection"""
    await callback.answer()
    logger.info(f"handle_themes_menu called with data: {callback.data}")
    
    if callback.data == "back_to_main":
        from .main_menu import main_menu
        await delete_previous_messages(callback.message, state)
        await state.clear()
        await main_menu(callback, state)
        return
    
    elif callback.data == "view_themes":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="period_3")],
            [InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è (7 –¥–Ω–µ–π)", callback_data="period_7")],
            [InlineKeyboardButton(text="–î–≤–µ –Ω–µ–¥–µ–ª–∏ (14 –¥–Ω–µ–π)", callback_data="period_14")],
            [InlineKeyboardButton(text="–ú–µ—Å—è—Ü (30 –¥–Ω–µ–π)", callback_data="period_30")],
            [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ (90 –¥–Ω–µ–π)", callback_data="period_90")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_themes_menu")]
        ])
        
        await callback.message.edit_text(
            "–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—ã –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏?",
            reply_markup=keyboard
        )
        await state.set_state(THERAPY_THEMES_PERIOD_SELECTION)
    
    elif callback.data == "add_theme":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_themes_menu")]
        ])
        
        await callback.message.edit_text(
            "–ù–∞–ø–∏—à–∏ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º:",
            reply_markup=keyboard
        )
        await state.set_state(THERAPY_THEMES_ADD_INPUT)

@router.callback_query(StateFilter(THERAPY_THEMES_PERIOD_SELECTION), F.data.startswith("period_"))
@require_trial_access('therapy_themes')
async def handle_period_selection(callback: types.CallbackQuery, state: FSMContext):
    """Handle period selection for viewing themes"""
    await callback.answer()
    period_days = int(callback.data.split("_")[1])
    
    logger.info(f"handle_period_selection called with period: {period_days} days")
    
    session = get_session()
    db_user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
    
    if not db_user:
        close_session(session)
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # Get themes for the selected period
    cutoff_date = datetime.now() - timedelta(days=period_days)
    themes = session.query(TherapyTheme).filter(
        TherapyTheme.user_id == db_user.id,
        TherapyTheme.created_at >= cutoff_date
    ).order_by(TherapyTheme.created_at.desc()).all()
    
    close_session(session)
    
    if not themes:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", callback_data="add_theme")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_themes_menu")]
        ])
        
        await callback.message.edit_text(
            f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_days} –¥–Ω–µ–π –Ω–µ—Ç —Ç–µ–º –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏.",
            reply_markup=keyboard
        )
        return
    
    # Format themes for display
    if period_days <= 7:
        # Short format for 3 days or week
        await generate_short_themes_report(callback, state, themes, period_days)
    else:
        # PDF format for longer periods
        await generate_themes_pdf(callback, state, themes, period_days, db_user)

async def generate_short_themes_report(callback: types.CallbackQuery, state: FSMContext, 
                                     themes: list, period_days: int):
    """Generate short text report for themes"""
    report_lines = [f"–û—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_days} –¥–Ω–µ–π:\n"]
    
    for theme in themes:
        date_str = theme.created_at.strftime("%d.%m.%Y, %H:%M")
        theme_text = theme.shortened_text if theme.is_shortened and theme.shortened_text else theme.original_text
        report_lines.append(f"‚Ä¢ {date_str}: {theme_text}")
    
    report_text = "\n".join(report_lines)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é", callback_data="mark_processed")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", callback_data="delete_theme")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_themes_menu")]
    ])
    
    await callback.message.edit_text(report_text, reply_markup=keyboard)
    await state.set_state(THERAPY_THEMES_VIEWING)

async def generate_themes_pdf(callback: types.CallbackQuery, state: FSMContext, 
                            themes: list, period_days: int, user):
    """Generate PDF report for themes"""
    await callback.message.edit_text("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF-–æ—Ç—á–µ—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    try:
        # Create PDF file
        start_date = (datetime.now() - timedelta(days=period_days)).strftime("%d.%m.%Y")
        end_date = datetime.now().strftime("%d.%m.%Y")
        
        pdf_path = await create_therapy_themes_pdf(
            start_date, end_date, period_days, themes, user
        )
        
        # Send PDF file
        pdf_file = FSInputFile(pdf_path, filename=f"therapy_themes_{start_date}_{end_date}.pdf")
        await callback.message.answer_document(
            pdf_file,
            caption=f"üìã –¢–µ–º—ã –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}"
        )
        
        # Send navigation buttons
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é", callback_data="mark_processed")],
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", callback_data="delete_theme")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_themes_menu")]
        ])
        await callback.message.answer("–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! üìÑ", reply_markup=keyboard)
        await state.set_state(THERAPY_THEMES_VIEWING)
        
        # Clean up temporary file
        os.unlink(pdf_path)
        
    except Exception as e:
        logger.error(f"Error generating PDF: {e}")
        # Fallback to text report
        await generate_themes_text_fallback(callback, state, themes, period_days)

@router.callback_query(StateFilter(THERAPY_THEMES_VIEWING), F.data.in_(["mark_processed", "delete_theme", "back_to_themes_menu"]))
@require_trial_access('therapy_themes')
async def handle_themes_viewing_actions(callback: types.CallbackQuery, state: FSMContext):
    """Handle actions from themes viewing"""
    await callback.answer()
    
    if callback.data == "back_to_themes_menu":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º—ã", callback_data="view_themes")],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", callback_data="add_theme")],
            [InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(
            "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–º –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ —Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º?",
            reply_markup=keyboard
        )
        await state.set_state(THERAPY_THEMES_MENU)
        return
    
    elif callback.data in ["mark_processed", "delete_theme"]:
        action_text = "–æ—Ç–º–µ—Ç–∏—Ç—å (—É–¥–∞–ª–∏—Ç—å)" if callback.data == "mark_processed" else "—É–¥–∞–ª–∏—Ç—å"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_viewing")]
        ])
        
        await callback.message.edit_text(
            f"–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç–µ–º—ã –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å {action_text} –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú",
            reply_markup=keyboard
        )
        
        await state.update_data(delete_action=callback.data)
        await state.set_state(THERAPY_THEMES_DELETE_INPUT)

@router.message(StateFilter(THERAPY_THEMES_DELETE_INPUT))
async def handle_delete_time_input(message: types.Message, state: FSMContext):
    """Handle time input for deleting/marking themes"""
    logger.info(f"handle_delete_time_input called with text: {message.text}")
    
    try:
        # Parse date and time
        date_time_str = message.text.strip()
        parsed_datetime = datetime.strptime(date_time_str, "%d.%m.%Y, %H:%M")
        
        # Find theme by datetime
        session = get_session()
        db_user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        # Look for theme within 5 minutes of specified time
        start_time = parsed_datetime - timedelta(minutes=5)
        end_time = parsed_datetime + timedelta(minutes=5)
        
        theme = session.query(TherapyTheme).filter(
            TherapyTheme.user_id == db_user.id,
            TherapyTheme.created_at >= start_time,
            TherapyTheme.created_at <= end_time
        ).first()
        
        if not theme:
            close_session(session)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_viewing")]
            ])
            
            await message.answer(
                "–ö–∞–∂–µ—Ç—Å—è, –≤—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ù–∞–ø–∏—à–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
                reply_markup=keyboard
            )
            return
        
        # Show confirmation
        theme_text = theme.shortened_text if theme.is_shortened and theme.shortened_text else theme.original_text
        date_str = theme.created_at.strftime("%d.%m.%Y, %H:%M")
        
        data = await state.get_data()
        action = data.get('delete_action', 'delete_theme')
        action_text = "–ø–æ–º–µ—Ç–∏—Ç—å (—É–¥–∞–ª–∏—Ç—å)" if action == "mark_processed" else "—É–¥–∞–ª–∏—Ç—å"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data=f"confirm_delete_{theme.id}")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="back_to_viewing")]
        ])
        
        await message.answer(
            f"–¢—ã —Ö–æ—á–µ—à—å {action_text} {date_str}: {theme_text[:100]}{'...' if len(theme_text) > 100 else ''}?",
            reply_markup=keyboard
        )
        
        await state.set_state(THERAPY_THEMES_DELETE_CONFIRMATION)
        close_session(session)
        
    except ValueError:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_viewing")]
        ])
        
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –≤—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ù–∞–ø–∏—à–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
            reply_markup=keyboard
        )

@router.callback_query(StateFilter(THERAPY_THEMES_DELETE_CONFIRMATION), F.data.startswith("confirm_delete_"))
@require_trial_access('therapy_themes')
async def handle_delete_confirmation(callback: types.CallbackQuery, state: FSMContext):
    """Handle delete confirmation"""
    await callback.answer()
    
    theme_id = int(callback.data.split("_")[2])
    
    session = get_session()
    theme = session.query(TherapyTheme).filter(TherapyTheme.id == theme_id).first()
    
    if theme:
        session.delete(theme)
        session.commit()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="back_to_themes_menu")]
        ])
        
        await callback.message.edit_text(
            "–¢–µ–º–∞ –±—ã–ª–∞ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    close_session(session)
    await state.set_state(THERAPY_THEMES_MENU)

@router.message(StateFilter(THERAPY_THEMES_ADD_INPUT))
async def handle_add_theme_input(message: types.Message, state: FSMContext):
    """Handle new theme input"""
    logger.info(f"handle_add_theme_input called with text length: {len(message.text)}")
    
    theme_text = message.text.strip()
    
    if len(theme_text) < 5:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_themes_menu")]
        ])
        
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é —Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏:",
            reply_markup=keyboard
        )
        return
    
    await state.update_data(theme_original_text=theme_text)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª", callback_data="save_original")],
        [InlineKeyboardButton(text="–°–æ–∫—Ä–∞—Ç–∏—Ç—å", callback_data="shorten_theme")]
    ])
    
    await message.answer(
        "–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å —Ç–µ–º–æ–π?",
        reply_markup=keyboard
    )
    
    await state.set_state(THERAPY_THEMES_ADD_EDIT)

@router.callback_query(StateFilter(THERAPY_THEMES_ADD_EDIT), F.data.in_(["save_original", "shorten_theme"]))
@require_trial_access('therapy_themes')
async def handle_theme_edit_choice(callback: types.CallbackQuery, state: FSMContext):
    """Handle theme editing choice"""
    await callback.answer()
    
    data = await state.get_data()
    original_text = data.get('theme_original_text', '')
    
    if callback.data == "save_original":
        # Save original theme
        await save_therapy_theme(callback.from_user.id, original_text, None, False)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_theme")],
            [InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(
            "–¢–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –≤–∏–¥–µ.",
            reply_markup=keyboard
        )
        await state.set_state(THERAPY_THEMES_MENU)
        
    elif callback.data == "shorten_theme":
        # Generate shortened version
        try:
            shortened_text = await generate_shortened_theme(original_text)
            await state.update_data(theme_shortened_text=shortened_text)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_shortened")],
                [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª", callback_data="save_original")]
            ])
            
            await callback.message.edit_text(
                f"–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:\n\n{shortened_text}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –≤–µ—Ä—Å–∏—é?",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"Error shortening theme: {e}")
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ —Ç–µ–º—ã. –°–æ—Ö—Ä–∞–Ω—è—é –æ—Ä–∏–≥–∏–Ω–∞–ª.")
            await save_therapy_theme(callback.from_user.id, original_text, None, False)

@router.callback_query(StateFilter(THERAPY_THEMES_ADD_EDIT), F.data == "save_shortened")
@require_trial_access('therapy_themes')
async def handle_save_shortened(callback: types.CallbackQuery, state: FSMContext):
    """Handle saving shortened theme"""
    await callback.answer()
    
    data = await state.get_data()
    original_text = data.get('theme_original_text', '')
    shortened_text = data.get('theme_shortened_text', '')
    
    await save_therapy_theme(callback.from_user.id, original_text, shortened_text, True)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_theme")],
        [InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(
        "–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
        reply_markup=keyboard
    )
    await state.set_state(THERAPY_THEMES_MENU)

async def save_therapy_theme(telegram_id: int, original_text: str, shortened_text: str = None, is_shortened: bool = False):
    """Save therapy theme to database"""
    session = get_session()
    
    db_user = session.query(User).filter(User.telegram_id == telegram_id).first()
    if not db_user:
        close_session(session)
        return
    
    theme = TherapyTheme(
        user_id=db_user.id,
        original_text=original_text,
        shortened_text=shortened_text,
        is_shortened=is_shortened
    )
    
    session.add(theme)
    session.commit()
    close_session(session)
    
    logger.info(f"Saved therapy theme for user {telegram_id}")

async def generate_shortened_theme(text: str) -> str:
    """Generate shortened version of theme using AI"""
    try:
        prompt = f"""–°–æ–∫—Ä–∞—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –¥–æ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º:

{text}

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt,
            config=genai.GenerateContentConfig(
                temperature=0.3,
                max_output_tokens=150
            )
        )
        
        return response.text.strip()
        
    except Exception as e:
        logger.error(f"Error generating shortened theme: {e}")
        return text

# Handle navigation callbacks
@router.callback_query(F.data == "back_to_themes_menu")
@require_trial_access('therapy_themes')
async def back_to_themes_menu(callback: types.CallbackQuery, state: FSMContext):
    """Handle back to themes menu"""
    await callback.answer()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º—ã", callback_data="view_themes")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", callback_data="add_theme")],
        [InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(
        "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–º –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ —Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º?",
        reply_markup=keyboard
    )
    await state.set_state(THERAPY_THEMES_MENU)

@router.callback_query(F.data == "back_to_viewing")
@require_trial_access('therapy_themes')
async def back_to_viewing(callback: types.CallbackQuery, state: FSMContext):
    """Handle back to viewing themes"""
    await callback.answer()
    # This should regenerate the viewing interface
    # For now, redirect to themes menu
    await back_to_themes_menu(callback, state)

@router.callback_query(F.data == "back_to_main")
@require_trial_access('therapy_themes')
async def back_to_main_from_themes(callback: types.CallbackQuery, state: FSMContext):
    """Handle back to main menu from themes"""
    await callback.answer()
    from .main_menu import main_menu
    await delete_previous_messages(callback.message, state)
    await state.clear()
    await main_menu(callback, state)

async def create_therapy_themes_pdf(start_date: str, end_date: str, period_days: int,
                                  themes: list, user) -> str:
    """Create PDF report for therapy themes and return file path"""
    
    # Setup Russian fonts
    fonts_available = setup_russian_fonts()
    
    # Create temporary file
    with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
        pdf_path = tmp_file.name
    
    # Create PDF document
    doc = SimpleDocTemplate(pdf_path, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []
    
    # Define custom styles with Russian font support
    if fonts_available:
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=1,  # Center alignment
            fontName='RussianFont-Bold'
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=14,
            spaceAfter=12,
            fontName='RussianFont-Bold'
        )
        
        normal_style = ParagraphStyle(
            'CustomNormal',
            parent=styles['Normal'],
            fontSize=10,
            fontName='RussianFont'
        )
        
        week_style = ParagraphStyle(
            'WeekStyle',
            parent=styles['Heading3'],
            fontSize=12,
            fontName='RussianFont-Bold',
            spaceAfter=8,
            spaceBefore=16
        )
    else:
        # Fallback to default styles if fonts are not available
        title_style = styles['Heading1']
        heading_style = styles['Heading2']
        normal_style = styles['Normal']
        week_style = styles['Heading3']
    
    # Title
    story.append(Paragraph("–¢–µ–º—ã –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ —Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º", title_style))
    story.append(Paragraph(f"–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}", normal_style))
    story.append(Spacer(1, 20))
    
    # 1. General summary (2-3 sentences)
    story.append(Paragraph("1. –û–±—â–µ–µ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", heading_style))
    
    total_themes = len(themes)
    summary = f"–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date} –ø–æ {end_date} –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {total_themes} —Ç–µ–º –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ —Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º. "
    
    if total_themes > 5:
        # Generate AI summary of common themes
        theme_texts = [theme.original_text for theme in themes]
        ai_summary = await generate_themes_summary(theme_texts)
        summary += ai_summary
    else:
        summary += "–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–∞—é—Ç –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–≥—É–ª—è—Ü–∏—é. –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown."
    
    story.append(Paragraph(summary, normal_style))
    story.append(Spacer(1, 20))
    
    # 2. Weekly breakdown
    story.append(Paragraph("2. –ü–æ –Ω–µ–¥–µ–ª—è–º", heading_style))
    
    # Group themes by week
    themes_by_week = defaultdict(list)
    
    for theme in themes:
        # Calculate week number from today (0 = current week, 1 = last week, etc.)
        days_ago = (datetime.now() - theme.created_at).days
        week_num = days_ago // 7
        themes_by_week[week_num].append(theme)
    
    # Process each week
    for week_num in sorted(themes_by_week.keys()):
        week_themes = sorted(themes_by_week[week_num], key=lambda x: x.created_at, reverse=True)
        
        # Week title
        if week_num == 0:
            week_title = "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è"
        elif week_num == 1:
            week_title = "–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è"
        else:
            week_title = f"{week_num} –Ω–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥"
        
        story.append(Paragraph(week_title, week_style))
        
        # Generate weekly theme using AI
        week_theme_texts = [theme.original_text for theme in week_themes]
        weekly_common_theme = await generate_weekly_theme(week_theme_texts)
        story.append(Paragraph(f"–û–±—â–∞—è —Ç–µ–º–∞: {weekly_common_theme}", normal_style))
        story.append(Spacer(1, 8))
        
        # 3. Individual entries with date, time: brief content
        for theme in week_themes:
            date_str = theme.created_at.strftime("%d.%m.%Y, %H:%M")
            theme_text = theme.shortened_text if theme.is_shortened and theme.shortened_text else theme.original_text
            
            # Truncate very long themes for PDF readability
            if len(theme_text) > 120:
                theme_text = theme_text[:117] + "..."
            
            story.append(Paragraph(f"{date_str}: {theme_text}", normal_style))
        
        story.append(Spacer(1, 12))
    
    # Additional recommendations section
    story.append(Paragraph("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", heading_style))
    recommendations = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Å—É–¥–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–µ–º—ã —Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏. " \
                     "–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Å—Ç–æ–∏—Ç —É–¥–µ–ª–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ä–µ–∞–∫—Ü–∏—è–º."
    story.append(Paragraph(recommendations, normal_style))
    
    # Build PDF
    doc.build(story)
    return pdf_path

async def generate_themes_summary(theme_texts: list) -> str:
    """Generate AI summary of common themes"""
    if not theme_texts:
        return "–¢–µ–º—ã —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã –∏ —Ç—Ä–µ–±—É—é—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞."
    
    context_text = " ".join(theme_texts[:10])  # Limit to first 10 themes
    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–º—ã –¥–ª—è –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ–±—â–µ–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç—ã:
    {context_text}
    
    –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ –≤–≤–µ–¥–µ–Ω–∏–π –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–π. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown.
    """
    
    try:
        response = await asyncio.to_thread(
            client.models.generate_content,
            model="gemini-2.0-flash",
            contents=[prompt]
        )
        summary = response.text if hasattr(response, 'text') else str(response)
        return summary.strip()
    except Exception as e:
        logger.error(f"Error generating themes summary: {e}")
        return "–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç —Ä–∞–±–æ—Ç—É —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∞–∫—Ü–∏—è–º–∏ –∏ –º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–º–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏."

async def generate_weekly_theme(week_theme_texts: list) -> str:
    """Generate common theme for a week"""
    if not week_theme_texts:
        return "—Ä–∞–∑–≤–∏—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏"
    
    if len(week_theme_texts) == 1:
        # For single theme, extract key concept
        theme = week_theme_texts[0]
        if "–æ—Ç–Ω–æ—à–µ–Ω–∏—è" in theme.lower():
            return "—Ä–∞–±–æ—Ç–∞ —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏"
        elif "—Ç—Ä–µ–≤–æ–≥–∞" in theme.lower() or "–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ" in theme.lower():
            return "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥–æ–π"
        elif "—Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞" in theme.lower() or "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å" in theme.lower():
            return "—Ä–∞–±–æ—Ç–∞ —Å —Å–∞–º–æ–æ—Ü–µ–Ω–∫–æ–π"
        elif "—Ä–∞–±–æ—Ç–∞" in theme.lower():
            return "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
        else:
            return "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è"
    
    context_text = " ".join(week_theme_texts)
    prompt = f"""
    –û–ø—Ä–µ–¥–µ–ª–∏ –æ–±—â—É—é —Ç–µ–º—É –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–∞–π –æ—Ç–≤–µ—Ç –≤ 2-4 —Å–ª–æ–≤–∞—Ö):
    {context_text}
    
    –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤: "—Ä–∞–±–æ—Ç–∞ —Å —Ç—Ä–µ–≤–æ–≥–æ–π", "–º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "—Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è". –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown.
    """
    
    try:
        response = await asyncio.to_thread(
            client.models.generate_content,
            model="gemini-2.0-flash",
            contents=[prompt]
        )
        theme = response.text if hasattr(response, 'text') else str(response)
        return theme.strip().lower()
    except Exception as e:
        logger.error(f"Error generating weekly theme: {e}")
        return "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è"

async def generate_themes_text_fallback(callback: types.CallbackQuery, state: FSMContext, 
                                      themes: list, period_days: int):
    """Generate text report as fallback when PDF fails"""
    
    # Group themes by week
    themes_by_week = defaultdict(list)
    
    for theme in themes:
        days_ago = (datetime.now() - theme.created_at).days
        week_num = days_ago // 7
        themes_by_week[week_num].append(theme)
    
    start_date = (datetime.now() - timedelta(days=period_days)).strftime("%d.%m.%Y")
    end_date = datetime.now().strftime("%d.%m.%Y")
    
    report_text = f"üìã –¢–µ–º—ã –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}\n\n"
    
    total_themes = len(themes)
    report_text += f"1. –û–±—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n"
    report_text += f"–ó–∞ –ø–µ—Ä–∏–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–æ {total_themes} —Ç–µ–º –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ —Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º.\n\n"
    
    report_text += "2. –ü–æ –Ω–µ–¥–µ–ª—è–º:\n\n"
    
    for week_num in sorted(themes_by_week.keys()):
        week_themes = sorted(themes_by_week[week_num], key=lambda x: x.created_at, reverse=True)
        
        if week_num == 0:
            week_title = "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è"
        elif week_num == 1:
            week_title = "–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è"
        else:
            week_title = f"{week_num} –Ω–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥"
        
        report_text += f"{week_title}\n"
        report_text += "–û–±—â–∞—è —Ç–µ–º–∞: —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è\n\n"
        
        for theme in week_themes:
            date_str = theme.created_at.strftime("%d.%m.%Y, %H:%M")
            theme_text = theme.shortened_text if theme.is_shortened and theme.shortened_text else theme.original_text
            if len(theme_text) > 100:
                theme_text = theme_text[:97] + "..."
            report_text += f"‚Ä¢ {date_str}: {theme_text}\n"
        
        report_text += "\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é", callback_data="mark_processed")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", callback_data="delete_theme")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_themes_menu")]
    ])
    
    # Split long messages
    if len(report_text) > 4000:
        parts = [report_text[i:i+4000] for i in range(0, len(report_text), 4000)]
        for i, part in enumerate(parts):
            if i == len(parts) - 1:  # Last part gets the keyboard
                await callback.message.answer(part, reply_markup=keyboard, parse_mode="Markdown")
            else:
                await callback.message.answer(part, parse_mode="Markdown")
    else:
        await callback.message.edit_text(report_text, reply_markup=keyboard, parse_mode="Markdown")
    
    await state.set_state(THERAPY_THEMES_VIEWING)

# Function to add therapy theme from thought diary (called externally)
async def add_theme_from_thought_diary(user_id: int, theme_text: str):
    """Add therapy theme from thought diary marking"""
    session = get_session()
    
    theme = TherapyTheme(
        user_id=user_id,
        original_text=theme_text,
        is_marked_for_processing=True
    )
    
    session.add(theme)
    session.commit()
    close_session(session)
    
    logger.info(f"Added therapy theme from thought diary for user {user_id}") 