import logging
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from src.database.session import get_session, close_session
from src.database.models import User, WeeklyReflection
from constants import (
    WEEKLY_REFLECTION_START,
    WEEKLY_REFLECTION_SMILE_MOMENT,
    WEEKLY_REFLECTION_KINDNESS,
    WEEKLY_REFLECTION_PEACE,
    WEEKLY_REFLECTION_NEW_DISCOVERY,
    WEEKLY_REFLECTION_GRATITUDE
)
from google import genai
from src.handlers.utils import delete_previous_messages
from trial_manager import require_trial_access

import os
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)
router = Router(name=__name__)

# Initialize Google Generative AI client
client = genai.Client(
    api_key=os.environ.get("GOOGLE_GENAI_API_KEY"),
    http_options={"base_url": os.environ.get("API_URL")}
)

async def delete_previous_messages(message: Message, state: FSMContext, keep_current: bool = False):
    """Helper function to delete previous messages"""
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])
    new_messages_to_delete_list = []

    for msg_id in messages_to_delete:
        if keep_current and msg_id == message.message_id:
            new_messages_to_delete_list.append(msg_id)
            continue
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except Exception as e:
            logger.debug(f"Failed to delete message {msg_id} in chat {message.chat.id}: {e}")
            pass

    if keep_current:
        if message.message_id in messages_to_delete:
            await state.update_data(messages_to_delete=[message.message_id])
        else:
            await state.update_data(messages_to_delete=[])
    else:
        await state.update_data(messages_to_delete=[])

async def start_weekly_reflection(message: Message, state: FSMContext):
    """Start the weekly reflection process"""
    logger.info(f"Starting weekly reflection for user {message.from_user.id}")
    
    # Check if user is registered
    session = get_session()
    db_user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    
    if not db_user or not getattr(db_user, "registration_complete", False):
        close_session(session)
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    close_session(session)
    
    # Clear previous state data
    await delete_previous_messages(message, state)
    
    # Initialize weekly reflection data
    await state.update_data({
        'messages_to_delete': [],
        'weekly_reflection_data': {
            'smile_moment': None,
            'kindness': None,
            'peace_moment': None,
            'new_discovery': None,
            'gratitude': None
        }
    })
    
    # Create keyboard with two buttons
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é", callback_data="weekly_start_reflection"),
            InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="weekly_decline_reflection")
        ]
    ])
    
    sent_message = await message.answer(
        "üåü –í—Ä–µ–º—è –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏!\n\n"
        "–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –≤—Å–ø–æ–º–Ω–∏–º —Ö–æ—Ä–æ—à–∏–µ –º–æ–º–µ–Ω—Ç—ã —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –∏ –ø–æ–¥—É–º–∞–µ–º –æ —Ç–æ–º, "
        "—á—Ç–æ –ø—Ä–∏–Ω–µ—Å–ª–æ –≤–∞–º —Ä–∞–¥–æ—Å—Ç—å –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å.",
        reply_markup=keyboard
    )
    
    await state.update_data(messages_to_delete=[sent_message.message_id])
    await state.set_state(WEEKLY_REFLECTION_START)

@router.callback_query(F.data == "weekly_decline_reflection", StateFilter(WEEKLY_REFLECTION_START))
@require_trial_access('weekly_reflection')
async def handle_decline_reflection(callback: CallbackQuery, state: FSMContext):
    """Handle decline reflection button"""
    await callback.answer()
    logger.info(f"User {callback.from_user.id} declined weekly reflection")
    
    await delete_previous_messages(callback.message, state)
    
    # Create keyboard to go to main menu
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="weekly_to_main")]
    ])
    
    sent_message = await callback.message.answer(
        "–î–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∫ —ç—Ç–æ–º—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ. "
        "–ò–Ω–æ–≥–¥–∞ –¥–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –≤–µ—â–∏ –ø–æ-–Ω–æ–≤–æ–º—É.",
        reply_markup=keyboard
    )
    
    await state.update_data(messages_to_delete=[sent_message.message_id])
    await state.clear()

@router.callback_query(F.data == "weekly_start_reflection", StateFilter(WEEKLY_REFLECTION_START))
@require_trial_access('weekly_reflection')
async def handle_start_reflection(callback: CallbackQuery, state: FSMContext):
    """Handle start reflection button"""
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started weekly reflection")
    
    await delete_previous_messages(callback.message, state)
    
    # Ask the first question
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="weekly_skip_smile"),
            InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="weekly_finish_early")
        ]
    ])
    
    sent_message = await callback.message.answer(
        "–ö–∞–∫–æ–π –º–∞–ª–µ–Ω—å–∫–∏–π –º–æ–º–µ–Ω—Ç –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞—Å—Ç–∞–≤–∏–ª —Ç–µ–±—è —É–ª—ã–±–Ω—É—Ç—å—Å—è –∏–ª–∏ —Ä–∞—Å—Å–º–µ—è—Ç—å—Å—è?",
        reply_markup=keyboard
    )
    
    await state.update_data(messages_to_delete=[sent_message.message_id])
    await state.set_state(WEEKLY_REFLECTION_SMILE_MOMENT)

@router.callback_query(F.data == "weekly_skip_smile", StateFilter(WEEKLY_REFLECTION_SMILE_MOMENT))
@require_trial_access('weekly_reflection')
async def handle_skip_smile(callback: CallbackQuery, state: FSMContext):
    """Handle skip smile moment"""
    await callback.answer()
    await move_to_kindness_question(callback.message, state)

@router.message(StateFilter(WEEKLY_REFLECTION_SMILE_MOMENT))
async def handle_smile_moment(message: Message, state: FSMContext):
    """Handle smile moment response"""
    logger.info(f"Handling smile moment response from user {message.from_user.id}")
    
    # Save the answer
    data = await state.get_data()
    weekly_reflection_data = data.get('weekly_reflection_data', {})
    weekly_reflection_data['smile_moment'] = message.text
    
    # Add current message to deletion list
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    await delete_previous_messages(message, state)
    
    await state.update_data({
        'messages_to_delete': [],
        'weekly_reflection_data': weekly_reflection_data
    })
    
    await move_to_kindness_question(message, state)

async def move_to_kindness_question(message: Message, state: FSMContext):
    """Move to kindness question"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="weekly_skip_kindness"),
            InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="weekly_finish_early")
        ]
    ])
    
    sent_message = await message.answer(
        "–ö—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞–ª –¥–ª—è —Ç–µ–±—è —á—Ç–æ-—Ç–æ –¥–æ–±—Ä–æ–µ –∏–ª–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å, —Ç—ã —Å–∞–º –ø–æ–º–æ–≥ –∫–æ–º—É-—Ç–æ —Ç–∞–∫, —á—Ç–æ —ç—Ç–æ –∑–∞–ø–æ–º–Ω–∏–ª–æ—Å—å?",
        reply_markup=keyboard
    )
    
    await state.update_data(messages_to_delete=[sent_message.message_id])
    await state.set_state(WEEKLY_REFLECTION_KINDNESS)

@router.callback_query(F.data == "weekly_skip_kindness", StateFilter(WEEKLY_REFLECTION_KINDNESS))
@require_trial_access('weekly_reflection')
async def handle_skip_kindness(callback: CallbackQuery, state: FSMContext):
    """Handle skip kindness"""
    await callback.answer()
    await move_to_peace_question(callback.message, state)

@router.message(StateFilter(WEEKLY_REFLECTION_KINDNESS))
async def handle_kindness(message: Message, state: FSMContext):
    """Handle kindness response"""
    logger.info(f"Handling kindness response from user {message.from_user.id}")
    
    # Save the answer
    data = await state.get_data()
    weekly_reflection_data = data.get('weekly_reflection_data', {})
    weekly_reflection_data['kindness'] = message.text
    
    # Add current message to deletion list
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    await delete_previous_messages(message, state)
    
    await state.update_data({
        'messages_to_delete': [],
        'weekly_reflection_data': weekly_reflection_data
    })
    
    await move_to_peace_question(message, state)

async def move_to_peace_question(message: Message, state: FSMContext):
    """Move to peace question"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="weekly_skip_peace"),
            InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="weekly_finish_early")
        ]
    ])
    
    sent_message = await message.answer(
        "–í –∫–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–µ–ª–∏ —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª(–∞) —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∏–ª–∏ –±—ã–ª(–∞) –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —Å–æ–±–æ–π?",
        reply_markup=keyboard
    )
    
    await state.update_data(messages_to_delete=[sent_message.message_id])
    await state.set_state(WEEKLY_REFLECTION_PEACE)

@router.callback_query(F.data == "weekly_skip_peace", StateFilter(WEEKLY_REFLECTION_PEACE))
@require_trial_access('weekly_reflection')
async def handle_skip_peace(callback: CallbackQuery, state: FSMContext):
    """Handle skip peace"""
    await callback.answer()
    await move_to_discovery_question(callback.message, state)

@router.message(StateFilter(WEEKLY_REFLECTION_PEACE))
async def handle_peace_moment(message: Message, state: FSMContext):
    """Handle peace moment response"""
    logger.info(f"Handling peace moment response from user {message.from_user.id}")
    
    # Save the answer
    data = await state.get_data()
    weekly_reflection_data = data.get('weekly_reflection_data', {})
    weekly_reflection_data['peace_moment'] = message.text
    
    # Add current message to deletion list
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    await delete_previous_messages(message, state)
    
    await state.update_data({
        'messages_to_delete': [],
        'weekly_reflection_data': weekly_reflection_data
    })
    
    await move_to_discovery_question(message, state)

async def move_to_discovery_question(message: Message, state: FSMContext):
    """Move to discovery question"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="weekly_skip_discovery"),
            InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="weekly_finish_early")
        ]
    ])
    
    sent_message = await message.answer(
        "–ß—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ —Ç—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª(–∞), —É–∑–Ω–∞–ª(–∞) –∏–ª–∏ –∑–∞–º–µ—Ç–∏–ª(–∞) –æ —Å–µ–±–µ –∏–ª–∏ –æ–∫—Ä—É–∂–∞—é—â–µ–º –º–∏—Ä–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?",
        reply_markup=keyboard
    )
    
    await state.update_data(messages_to_delete=[sent_message.message_id])
    await state.set_state(WEEKLY_REFLECTION_NEW_DISCOVERY)

@router.callback_query(F.data == "weekly_skip_discovery", StateFilter(WEEKLY_REFLECTION_NEW_DISCOVERY))
@require_trial_access('weekly_reflection')
async def handle_skip_discovery(callback: CallbackQuery, state: FSMContext):
    """Handle skip discovery"""
    await callback.answer()
    await move_to_gratitude_question(callback.message, state)

@router.message(StateFilter(WEEKLY_REFLECTION_NEW_DISCOVERY))
async def handle_new_discovery(message: Message, state: FSMContext):
    """Handle new discovery response"""
    logger.info(f"Handling new discovery response from user {message.from_user.id}")
    
    # Save the answer
    data = await state.get_data()
    weekly_reflection_data = data.get('weekly_reflection_data', {})
    weekly_reflection_data['new_discovery'] = message.text
    
    # Add current message to deletion list
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    await delete_previous_messages(message, state)
    
    await state.update_data({
        'messages_to_delete': [],
        'weekly_reflection_data': weekly_reflection_data
    })
    
    await move_to_gratitude_question(message, state)

async def move_to_gratitude_question(message: Message, state: FSMContext):
    """Move to gratitude question"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="weekly_skip_gratitude"),
            InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="weekly_finish_early")
        ]
    ])
    
    sent_message = await message.answer(
        "–ó–∞ —á—Ç–æ —Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω(–Ω–∞) –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ ‚Äî –Ω–µ–≤–∞–∂–Ω–æ, –±–æ–ª—å—à–æ–µ —ç—Ç–æ –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–æ–µ?",
        reply_markup=keyboard
    )
    
    await state.update_data(messages_to_delete=[sent_message.message_id])
    await state.set_state(WEEKLY_REFLECTION_GRATITUDE)

@router.callback_query(F.data == "weekly_skip_gratitude", StateFilter(WEEKLY_REFLECTION_GRATITUDE))
@require_trial_access('weekly_reflection')
async def handle_skip_gratitude(callback: CallbackQuery, state: FSMContext):
    """Handle skip gratitude"""
    await callback.answer()
    await complete_weekly_reflection(callback.message, state)

@router.message(StateFilter(WEEKLY_REFLECTION_GRATITUDE))
async def handle_gratitude(message: Message, state: FSMContext):
    """Handle gratitude response and complete the reflection"""
    logger.info(f"Handling gratitude response from user {message.from_user.id}")
    
    # Save the answer
    data = await state.get_data()
    weekly_reflection_data = data.get('weekly_reflection_data', {})
    weekly_reflection_data['gratitude'] = message.text
    
    # Add current message to deletion list
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    await delete_previous_messages(message, state)
    
    await state.update_data({
        'messages_to_delete': [],
        'weekly_reflection_data': weekly_reflection_data
    })
    
    await complete_weekly_reflection(message, state)

@router.callback_query(F.data == "weekly_finish_early")
@require_trial_access('weekly_reflection')
async def handle_finish_early(callback: CallbackQuery, state: FSMContext):
    """Handle early finish button"""
    await callback.answer()
    await complete_weekly_reflection(callback.message, state)

async def complete_weekly_reflection(message: Message, state: FSMContext):
    """Complete the weekly reflection and save to database"""
    logger.info(f"Completing weekly reflection for user {message.from_user.id}")
    
    data = await state.get_data()
    weekly_reflection_data = data.get('weekly_reflection_data', {})
    
    # Generate AI summary
    try:
        ai_summary = await generate_ai_summary(weekly_reflection_data)
    except Exception as e:
        logger.error(f"Failed to generate AI summary: {e}")
        ai_summary = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ."
    
    # Save to database
    session = get_session()
    try:
        db_user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
        if db_user:
            weekly_reflection = WeeklyReflection(
                user_id=db_user.id,
                smile_moment=weekly_reflection_data.get('smile_moment'),
                kindness=weekly_reflection_data.get('kindness'),
                peace_moment=weekly_reflection_data.get('peace_moment'),
                new_discovery=weekly_reflection_data.get('new_discovery'),
                gratitude=weekly_reflection_data.get('gratitude'),
                ai_summary=ai_summary
            )
            session.add(weekly_reflection)
            session.commit()
            logger.info(f"Successfully saved weekly reflection for user {message.from_user.id}")
        else:
            logger.error(f"User not found in database for telegram_id: {message.from_user.id}")
    except Exception as e:
        logger.error(f"Failed to save weekly reflection: {e}")
        session.rollback()
    finally:
        close_session(session)
    
    # Generate AI completion message
    try:
        completion_message = await generate_ai_completion_message(weekly_reflection_data, db_user.full_name if db_user else "")
    except Exception as e:
        logger.error(f"Failed to generate AI completion message: {e}")
        completion_message = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏! –¢—ã –ø—Ä–æ–¥–µ–ª–∞–ª(–∞) –≤–∞–∂–Ω—É—é —Ä–∞–±–æ—Ç—É, —Ä–∞–∑–º—ã—à–ª—è—è –æ —Ö–æ—Ä–æ—à–∏—Ö –º–æ–º–µ–Ω—Ç–∞—Ö –Ω–µ–¥–µ–ª–∏. –ñ–µ–ª–∞—é —Ç–µ–±–µ –æ—Ç–ª–∏—á–Ω–æ–π –Ω–µ–¥–µ–ª–∏! üåü"
    
    # Show completion message with button to main menu
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="weekly_to_main")]
    ])
    
    sent_message = await message.answer(
        completion_message,
        reply_markup=keyboard
    )
    
    await state.update_data({
        'messages_to_delete': [sent_message.message_id],
        'weekly_reflection_data': {}
    })

async def generate_ai_summary(weekly_reflection_data: dict) -> str:
    """Generate AI summary of weekly reflection"""
    try:
        # Create a summary of non-empty responses
        responses = []
        if weekly_reflection_data.get('smile_moment'):
            responses.append(f"–ú–æ–º–µ–Ω—Ç —Ä–∞–¥–æ—Å—Ç–∏: {weekly_reflection_data['smile_moment']}")
        if weekly_reflection_data.get('kindness'):
            responses.append(f"–î–æ–±—Ä–æ—Ç–∞: {weekly_reflection_data['kindness']}")
        if weekly_reflection_data.get('peace_moment'):
            responses.append(f"–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ: {weekly_reflection_data['peace_moment']}")
        if weekly_reflection_data.get('new_discovery'):
            responses.append(f"–û—Ç–∫—Ä—ã—Ç–∏–µ: {weekly_reflection_data['new_discovery']}")
        if weekly_reflection_data.get('gratitude'):
            responses.append(f"–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å: {weekly_reflection_data['gratitude']}")
        
        if not responses:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."
        
        prompt = f"""
–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

{chr(10).join(responses)}

–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –Ω–µ–¥–µ–ª–∏.
–ü–∏—à–∏ –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.
"""

        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=[{
                "role": "user",
                "parts": [{"text": prompt}]
            }],
            config={
                "max_output_tokens": 200,
                "temperature": 0.7
            }
        )
        
        return response.candidates[0].content.parts[0].text.strip()
    
    except Exception as e:
        logger.error(f"Google Generative AI API error: {e}")
        # Fallback to simple summary
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏ –æ –ø—Ä–æ—à–µ–¥—à–µ–π –Ω–µ–¥–µ–ª–µ."

async def generate_ai_completion_message(weekly_reflection_data: dict, user_name: str) -> str:
    """Generate AI completion message with praise and wishes"""
    try:
        # Count how many questions were answered
        answered_count = sum(1 for value in weekly_reflection_data.values() if value)
        
        prompt = f"""
–°–æ–∑–¥–∞–π —Ç–µ–ø–ª–æ–µ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≤–µ—Ä—à–∏–ª –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ {answered_count} –∏–∑ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö –Ω–µ–¥–µ–ª–∏.

–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ:
1. –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
2. –ü–æ—Ö–≤–∞–ª–∏—Ç—å –∑–∞ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É
3. –ü–æ–∂–µ–ª–∞—Ç—å –æ—Ç–ª–∏—á–Ω–æ–π –Ω–µ–¥–µ–ª–∏

–ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–ø–ª—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ç–æ–Ω. –î–ª–∏–Ω–∞: 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
–î–æ–±–∞–≤—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω—Ü–µ.
"""

        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=[{
                "role": "user",
                "parts": [{"text": prompt}]
            }],
            config={
                "max_output_tokens": 150,
                "temperature": 0.8
            }
        )
        
        return response.candidates[0].content.parts[0].text.strip()
    
    except Exception as e:
        logger.error(f"Google Generative AI API error: {e}")
        # Fallback message
        return f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏, {user_name}! –¢—ã –ø—Ä–æ–¥–µ–ª–∞–ª(–∞) –≤–∞–∂–Ω—É—é —Ä–∞–±–æ—Ç—É, —Ä–∞–∑–º—ã—à–ª—è—è –æ —Ö–æ—Ä–æ—à–∏—Ö –º–æ–º–µ–Ω—Ç–∞—Ö –Ω–µ–¥–µ–ª–∏. –ñ–µ–ª–∞—é —Ç–µ–±–µ –æ—Ç–ª–∏—á–Ω–æ–π –Ω–µ–¥–µ–ª–∏! üåü"

@router.callback_query(F.data == "weekly_to_main")
@require_trial_access('weekly_reflection')
async def weekly_to_main_callback(callback: CallbackQuery, state: FSMContext):
    """Handle return to main menu from weekly reflection"""
    await callback.answer()
    
    # Import here to avoid circular imports
    from .main_menu import main_menu
    
    await delete_previous_messages(callback.message, state)
    await main_menu(callback, state) 