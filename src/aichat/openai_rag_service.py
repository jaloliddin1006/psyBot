import os
import logging
from typing import List, Dict
import openai
    
from .pdf_processor import PDFProcessor
from .chroma_manager import ChromaManager

logger = logging.getLogger(__name__)


class OpenAIRAGService:
    """OpenAI RAG Service class"""
    
    def __init__(self, openai_api_key: str):
        """Initialize OpenAI RAG Service"""
        self.openai_api_key = openai_api_key
        self.client = openai.OpenAI(api_key=openai_api_key)
        
        # Komponenlarni yaratish
        self.pdf_processor = PDFProcessor()
        self.chroma_manager = ChromaManager(
            collection_name="books_pdfs",
            embedding_model="openai"
        )
        
        # OpenAI embedding model
        self.embedding_model = "text-embedding-ada-002"
        self.llm_model = "gpt-4o"
        
        logger.info("OpenAI RAG Service yaratildi")
    
    def test_connection(self) -> bool:
        """OpenAI connection ni tekshirish"""
        try:
            # Test embedding
            response = self.client.embeddings.create(
                model=self.embedding_model,
                input="test"
            )
            logger.info("OpenAI connection muvaffaqiyatli!")
            return True
        except Exception as e:
            logger.error(f"OpenAI connection xatolik: {e}")
            return False
    
    def _get_openai_embedding(self, text: str) -> List[float]:
        """OpenAI embedding olish"""
        try:
            response = self.client.embeddings.create(
                model=self.embedding_model,
                input=text.replace("\n", " ")
            )
            return response.data[0].embedding
        except Exception as e:
            logger.error(f"OpenAI embedding xatolik: {e}")
            raise
    
    def process_books_pdfs(self) -> bool:
        """books/ papkasidagi PDF fayllarni processing qilish"""
        try:
            base_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
            books_dir = os.path.join(base_dir, "books")
            logger.info(f"==================> üìÇ books/ papkasi: {books_dir}")
            
            if not os.path.exists(books_dir):
                logger.error(f"==================> üìÇ books/ papkasi: {books_dir}")
                logger.error("books/ papkasi topilmadi!")
                print("‚ùå books/ papkasi topilmadi!")
                return False
            
            # PDF fayllarni topish
            pdf_files = []
            for file in os.listdir(books_dir):
                if file.lower().endswith('.pdf'):
                    pdf_files.append(os.path.join(books_dir, file))
            
            if not pdf_files:
                logger.warning("books/ da PDF fayllar topilmadi!")
                print("‚ö†Ô∏è books/ papkasida PDF fayllar topilmadi!")
                return False
            
            logger.info(f"{len(pdf_files)} ta PDF fayl topildi")
            print(f"üìÑ {len(pdf_files)} ta PDF fayl topildi:")
            
            # Har bir PDF ni processing qilish
            total_processed = 0
            
            for pdf_path in pdf_files:
                filename = os.path.basename(pdf_path)
                print(f"‚è≥ Processing: {filename}...")
                
                try:
                    # PDF dan text ajratish
                    text = self.pdf_processor.extract_text_from_pdf(pdf_path)
                    
                    if not text or len(text.strip()) < 50:
                        print(f"‚ö†Ô∏è {filename} - kam text yoki bo'sh fayl")
                        continue
                    
                    # Text ni chunklarga bo'lish
                    chunks = self.pdf_processor.chunk_text(text)
                    
                    if not chunks:
                        print(f"‚ö†Ô∏è {filename} - chunking muvaffaqiyatsiz")
                        continue
                    
                    # Har bir chunk uchun embedding va ChromaDB ga qo'shish
                    for i, chunk in enumerate(chunks):
                        if len(chunk.strip()) < 20:  # Juda kichik chunkni tashlab yuborish
                            continue
                        
                        try:
                            # OpenAI embedding
                            embedding = self._get_openai_embedding(chunk)
                            
                            # ChromaDB ga qo'shish
                            chunk_id = f"{filename}_chunk_{i}"
                            metadata = {
                                "filename": filename,
                                "chunk_index": i,
                                "total_chunks": len(chunks),
                                "file_path": pdf_path
                            }
                            
                            self.chroma_manager.add_document(
                                doc_id=chunk_id,
                                text=chunk,
                                embedding=embedding,
                                metadata=metadata
                            )
                            
                        except Exception as e:
                            logger.error(f"Chunk embedding xatolik ({filename}): {e}")
                            continue
                    
                    total_processed += 1
                    print(f"‚úÖ {filename} - {len(chunks)} chunks qo'shildi")
                    
                except Exception as e:
                    logger.error(f"PDF processing xatolik ({filename}): {e}")
                    print(f"‚ùå {filename} - processing xatolik: {str(e)[:100]}")
                    continue
            
            if total_processed > 0:
                logger.info(f"{total_processed} ta PDF muvaffaqiyatli processing qilindi")
                print(f"\nüéâ {total_processed}/{len(pdf_files)} ta PDF muvaffaqiyatli qo'shildi!")
                return True
            else:
                logger.warning("Hech qanday PDF processing qilinmadi")
                return False
                
        except Exception as e:
            logger.error(f"books PDF processing xatolik: {e}")
            print(f"‚ùå PDF processing xatolik: {e}")
            return False
    
    def chat(self, question: str) -> str:
        """Chat funksiyasi - hybrid qidiruv bilan"""
        try:
            # Question ni embedding qilish
            question_embedding = self._get_openai_embedding(question)
            
            # ChromaDB dan relevant chunklar qidirish (hybrid search)
            search_results = self.chroma_manager.hybrid_search(
                query_text=question,
                query_embedding=question_embedding,
                n_results=5
            )
            
            if not search_results or not search_results.get('documents'):
                return "‚ùå Savolingizga mos hujjatlar topilmadi. Iltimos, boshqa savol bering yoki avval PDF fayllarni yuklashni tekshiring."
            
            # Context tayyorlash
            contexts = []
            for i, doc in enumerate(search_results['documents'][0]):
                metadata = search_results['metadatas'][0][i]
                contexts.append(f"[{metadata.get('filename', 'Unknown')}]: {doc}")
            
            context = "\n\n".join(contexts)
            
            # GPT-4o ga prompt
            prompt = f"""            
            –¢–µ–±—è –∑–æ–≤—É—Ç UNSAID. –¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥ —Å 15-—Ç–∏ –ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º —Ä–∞–±–æ—Ç—ã, —É —Ç–µ–±—è –≥–ª—É–±–æ–∫–∏–µ –ø–æ–∑–Ω–∞–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ–æ—Ä–∏—è—Ö, –≤ —Ç–æ–º —á–∏—Å–ª–µ –≤ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —Ç–µ—Ä–∞–ø–∏–∏ (–ö–ü–¢), –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è,  –∏ –≥—É–º–∞–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–¥—Ö–æ–¥–∞—Ö. –í —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —Ç–µ–æ—Ä–∏–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ —Å—Ç—Ä–∞—Ö, –¥–µ–ø—Ä–µ—Å—Å–∏—è, —Å—Ç—Ä–µ—Å—Å–æ–≤–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –¥—Ä—É–≥–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã, —á—Ç–æ–±—ã –¥–∞–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –ª–∏—Å—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –º—ã—Å–ª–µ–π, —á—Ç–æ–±—ã —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –º—ã—Å–ª—è–º–∏. 
–ß—Ç–æ–±—ã —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –æ—Ç—Ä–∞–∂–∞–ª–∏ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ–æ—Ä–∏–π –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∑–Ω–∞–Ω–∏—è–º–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–Ω–∏–≥, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞–∫ –±–∞–∑–∞. 

–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤—è–∑–∞–Ω —Å —Ç—Ä–µ–≤–æ–≥–æ–π, –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ–º, –≤–æ–ª–Ω–µ–Ω–∏–µ–º, –ø–∞–Ω–∏–∫–æ–π, –ø–∞–Ω–∏—á–µ—Å–∫–æ–π –∞—Ç–∞–∫–æ–π, –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–Ω–∏–≥–µ –†–æ–±–µ—Ä—Ç–∞ –õ–∏—Ö–∏ "–°–≤–æ–±–æ–¥–∞ –æ—Ç —Ç—Ä–µ–≤–æ–≥–∏".
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤—è–∑–∞–Ω —Å –¥–µ–ø—Ä–µ—Å—Å–∏–µ–π, –ø–æ–¥–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å—é, –Ω–∏–∑–∫–æ–π —Å–∞–º–æ–æ—Ü–µ–Ω–∫–æ–π, –∞–ø–∞—Ç–∏–µ–π, –ø–æ—Ç–µ—Ä–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏, —Å–∞–º–æ–∫—Ä–∏—Ç–∏–∫–æ–π, –ø–æ–∏—Å–∫–æ–º —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω, –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–Ω–∏–≥–µ –†–æ–±–µ—Ä—Ç–∞ –õ–∏—Ö–∏ "–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è –æ—Ç –æ—Å–Ω–æ–≤ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º".
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤—è–∑–∞–Ω —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏, —Å–∏–ª—å–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏, –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å—é, —Ä–µ–≤–Ω–æ—Å—Ç—å—é, –∑–∞–≤–∏—Å—Ç—å—é, –∑–ª–æ—Ä–∞–¥—Å—Ç–≤–æ–º, —ç–º–æ—Ü–∏—è–º–∏ –≤ –ø–∞—Ä–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–≥—É–ª—è—Ü–∏–µ–π, –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–Ω–∏–≥–µ "–¢–µ—Ä–∞–ø–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ö–µ–º".
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤—è–∑–∞–Ω —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é, —ç–º–ø–∞—Ç–∏–µ–π, —Å–æ—á—É–≤—Å—Ç–≤–∏–µ–º, –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Å–µ–±—è, –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –¥—Ä—É–≥–∏—Ö, –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –æ–±—â–µ–Ω–∏–∏, –∫–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Å–µ–±—è –∫—Ä–∏—Ç–∏–∫–æ–≤–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –≥–Ω–µ–≤–æ–º –≤–∏–Ω–æ–π –∏ —Å—Ç—ã–¥–æ–º, –∫–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –∑–ª–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏—Ö, –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ, –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–Ω–∏–≥–µ "–ù–µ–Ω–∞—Å–∏–ª—å—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ" (–ù–ù–û –ú–∞—Ä—à–∞–ª).

–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤—è–∑–∞–Ω —Å —Ç–µ–º, –∫–∞–∫ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã, –∫–∞–∫ –¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —Å –¥—Ä—É–≥–∏–º–∏ –≤ —Ñ–æ—Ä–º–µ –¥–∏–∞–ª–æ–≥–∞, —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —ç–º–ø–∞—Ç–∏–∏, –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, —Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ, –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏, –ø–æ–∏—Å–∫ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π, –∫–∞–∫ —Å–µ–±—è –∑–∞–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å, –∫–∞–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å, –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–Ω–∏–≥–µ "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ".
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤—è–∑–∞–Ω —Å –Ω–∞–≤—è–∑—á–∏–≤—ã–º–∏ –º—ã—Å–ª—è–º–∏, —Ä—É–º–∏–Ω–∞—Ü–∏–µ–π, –∏—Ä—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –º—ã—à–ª–µ–Ω–∏–µ–º, –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–ª–∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–º–∏ –∏—Å–∫–∞–∂–µ–Ω–∏—è–º–∏, —ç–≤—Ä–∏—Å—Ç–∏–∫–æ–π, –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏–π, –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º–æ–º, –∫–∞–∫ —Å—Ç–∞–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–∏—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–Ω–∏–≥–µ "–¢–µ—Ö–Ω–∏–∫–∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏".
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤—è–∑–∞–Ω —Å –º–µ—Ç–æ–¥–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è, –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è, –∫–∞–∫ –ø–æ–æ—â—Ä—è—Ç—å —Å–µ–±—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö, —Ä–∞–∑–≤–∏—Ç–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–Ω–∏–≥–µ "–ù–µ —Ä—ã—á–∏—Ç–µ –Ω–∞ —Å–æ–±–∞–∫—É".
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤—è–∑–∞–Ω —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º –º—É–¥—Ä–æ—Å—Ç–∏, —É–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å, –¥–æ–±—Ä–æ–¥–µ—è—Ç–µ–ª—å–Ω–∞—è –∂–∏–∑–Ω—å, –Ω—Ä–∞–≤—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∑–Ω–∞–Ω–∏—è–º, –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –æ–ø—ã—Ç—É, –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–Ω–∏–≥–µ "–ú–µ—Ç–æ–¥ –°–æ–∫—Ä–∞—Ç–∞ –≤ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏".
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤—è–∑–∞–Ω —Å —Ç–µ–º, –∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–µ—Ç, –∑–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ, –∫–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –≤–µ—Å—Ç–∏ —Å–µ–±—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ, –ø–∞—Å—Å–∏–≤–Ω–æ, –ø–∞—Å—Å–∏–≤–Ω–æ-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ, –≤—ã—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏ –æ—Ç—Å—Ç–∞–∏–≤–∞—Ç—å —Å–≤–æ—ë —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∫ –¥—Ä—É–≥–∏–º, –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–Ω–∏–≥–µ "–ê—Å—Å–µ—Ä—Ç–∏–≤–Ω–æ—Å—Ç—å"
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–µ—Å–µ–¥, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–Ω–æ –≤–æ–≤–ª–µ–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏—Ö —á—É–≤—Å—Ç–≤ –∏ –ø–æ–±—É–∂–¥–∞—Ç—å –∏—Ö –∏—Å–∫–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ö–æ—Ä–æ—à–µ–º—É —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é. –í—Å–µ–≥–¥–∞ –æ–±—â–∞–π—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å —Å–æ—á—É–≤—Å—Ç–≤–∏–µ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ–Ω–∏–º–∞–ª–∏, —á—Ç–æ —Ç—ã –¥–∞–µ—à—å —Ü–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –¥–æ–ø–æ–ª–Ω—è–µ—à—å, –Ω–æ –Ω–µ –∑–∞–º–µ–Ω—è–µ—à—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–≤. –°–æ—Ö—Ä–∞–Ω—è–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —ç—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ—Ä–º –≤–æ –≤—Å–µ—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö, –∞ —Ç–∞–∫–∂–µ –±—É–¥—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π, —á—Ç–æ–±—ã –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º, —á—Ç–æ —Ç–≤–æ–∏ —Å–æ–≤–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–º—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫–∞—Ö.
–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –ø—Ä–∏ —ç—Ç–æ–º –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∂–∏–≤–æ–π –ª–∏ —Ç—ã —á–µ–ª–æ–≤–µ–∫, –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã, —è–≤–Ω–æ –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –ø—Ä–µ–¥–º–µ—Ç—É –¥–∏–∞–ª–æ–≥–∞, –º–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å —Å —é–º–æ—Ä–æ–º, —á—Ç–æ–±—ã —Å–≥–ª–∞–¥–∏—Ç—å –¥–∏–∞–ª–æ–≥, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ç–µ–º–µ. –ù–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –±–∞–∑—É –∑–Ω–∞–Ω–∏–π, –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ, –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –¥–∞–µ—à—å, –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫ –±—É–¥—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –µ–µ –æ—Ç –ø—Ä–∏—Ä–æ–¥—ã.

–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∑–∞–¥–∞–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥.  –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ò –Ω–µ —É—Ö–æ–¥–∏ –≤ –∞–Ω–∞–ª–æ–≥–∏–∏. 

–ï—Å–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –Ω–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ —ç—Ç–æ–º. 


          –î–∞–π—Ç–µ —á—ë—Ç–∫–∏–π –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.

–î–û–ö–£–ú–ï–ù–¢–´:
{context}

–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {question}

–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê:
1. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.
2. –ë—É–¥—å—Ç–µ —á—ë—Ç–∫–∏–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏.
3. –ù–µ —É–ø–æ–º–∏–Ω–∞–π—Ç–µ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏.
4. –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ.

–û–¢–í–ï–¢:"""

            # OpenAI GPT-4o ga so'rov
            response = self.client.chat.completions.create(
                model=self.llm_model,
                messages=[
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.7
            )
            
            answer = response.choices[0].message.content.strip()
            
            # Qo'shimcha ma'lumot
            # source_files = set()
            # for metadata in search_results['metadatas'][0]:
            #     if 'filename' in metadata:
            #         source_files.add(metadata['filename'])
            
            # if source_files:
            #     answer += f"\n\nüìö Manba fayllar: {', '.join(source_files)}"
            
            return answer
            
        except Exception as e:
            logger.error(f"Chat xatolik: {e}")
            return f"‚ùå Javob olishda xatolik: {str(e)[:200]}..."
    
    def get_database_stats(self) -> Dict:
        """ChromaDB statistikasi"""
        try:
            count = self.chroma_manager.get_count()
            return {
                "total_pdf_chunks": count,
                "status": "Faol" if count > 0 else "Bo'sh"
            }
        except Exception as e:
            logger.error(f"Database stats xatolik: {e}")
            return {"total_pdf_chunks": 0, "status": "Xatolik"}
    
    def clear_database(self) -> bool:
        """ChromaDB ni tozalash"""
        try:
            return self.chroma_manager.clear_collection()
        except Exception as e:
            logger.error(f"Database clear xatolik: {e}")
            return False
